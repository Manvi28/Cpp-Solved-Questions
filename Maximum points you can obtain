There are several cards arranged in a row, and each card has an associated number of points. The points are given in the integer array cardPoints.

In one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.

Your score is the sum of the points of the cards you have taken.

Given the integer array cardPoints and the integer k, return the maximum score you can obtain.

class Solution {
public:
    int maxScore(vector<int>& cardPoints, int k) {
    int n = cardPoints.size();
    int totalSum = 0;

    // Calculate the total sum of the array
    for (int i = 0; i < n; i++) {
        totalSum += cardPoints[i];
    }

    // If k equals n, then we take all cards
    if (k == n) return totalSum;

    // Sliding window to find the smallest subarray sum of size (n - k)
    int windowSum = 0;
    for (int i = 0; i < n - k; i++) {
        windowSum += cardPoints[i];
    }

    int minWindowSum = windowSum;
    for (int i = n - k; i < n; i++) {
        windowSum += cardPoints[i] - cardPoints[i - (n - k)];
        minWindowSum = min(minWindowSum, windowSum);
    }

    // Maximum score is total sum minus the smallest subarray sum
    return totalSum - minWindowSum;
}
};
