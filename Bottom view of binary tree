Given a binary tree, return an array where elements represent the bottom view of the binary tree from left to right.

Note: If there are multiple bottom-most nodes for a horizontal distance from the root, then the latter one in the level traversal is considered. For example, in the below diagram, 3 and 4 are both the bottommost nodes at a horizontal distance of 0, here 4 will be considered.


class Solution {
  public:
    vector <int> bottomView(Node *root) {
        // Your Code Here
        vector<int>ans;
        if(root==NULL){
            return ans;
        }
        map<int,int>bottom;
        queue<pair<Node*,int>>q;
        q.push(make_pair(root,0));
        while(!q.empty()){
            pair<Node*,int>temp=q.front();
            q.pop();
            Node* first=temp.first;
            int hd=temp.second;
            bottom[hd]=first->data;
            if(first->left){
                q.push(make_pair(first->left,hd-1));
                
            }
            if(first->right){
                q.push(make_pair(first->right,hd+1));
            }
        }
        for(auto i:bottom){
            ans.push_back(i.second);
        }
        return ans;
    }
};
