Given two strings s1 and s2, return true if s2 contains a 
permutation
 of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.'

class Solution {
    private:
    bool checkequal(int count1[],int count2[]){
        for(int i=0;i<26;i++){
            if(count1[i]!=count2[i]){
                return 0;
            }
        }
        return 1;
    }
public:
    bool checkInclusion(string s1, string s2) {
        int count1[26]={0};
        for(int i=0;i<s1.length();i++){
            int i1=s1[i]-'a';
            count1[i1]++;
        }
        int window=s1.length();
        int i=0;
        int count2[26]={0};
        while(i<window&&i<s2.length()){
            int i2=s2[i]-'a';
            count2[i2]++;
            i++;
        }
        if(checkequal(count1,count2)){
            return 1;
        }
        while(i<s2.length()){
            char newchar=s2[i];
            int i3=newchar-'a';
            count2[i3]++;
            char old=s2[i-window];
            i3=old-'a';
            count2[i3]--;
            
            i++;
             if(checkequal(count1,count2)){
            return 1;
        }
        
        }
        return 0;
    }
};
