#include <iostream>
#include <queue>
using namespace std;
class node{
    public:
    int data;
    node* left;
    node* right;
    
    node (int d){
        this->data=d;
        this->left=NULL;
        this->right=NULL;
    }
};
void levelordertraversal(node* root){
    queue<node*>q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        node *temp=q.front();
        q.pop();
        if(temp==NULL){
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
            cout<<temp->data<<" ";
            if(temp->left){
                q.push(temp->left);
            
            }
            if(temp->right){
                q.push(temp->right);
            }
        }
    }
}
void buildfromlevel(node* &root){
    queue<node*>q;
    int data;
    cout<<"enter data for root node "<<endl;
    cin>>data;
    root=new node(data);
    q.push(root);
    while(!q.empty()){
        node* temp=q.front();
        q.pop();
        
        cout<<"enter data for left"<<temp->data<<endl;
        int ldata;
        cin>>ldata;
        if(ldata!=-1){
            temp->left=new node(ldata);
            q.push(temp->left);
        }
         cout<<"enter data for right"<<temp->data<<endl;
        int rdata;
        cin>>rdata;
        if(rdata!=-1){
            temp->right=new node(rdata);
            q.push(temp->right);
        }
    }
}
int main() {
   node* root=NULL;
   //root=buildtree(root);
   buildfromlevel(root);
   levelordertraversal(root);
 return 0;
}
