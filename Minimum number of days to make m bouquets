You are given an integer array bloomDay, an integer m and an integer k.

You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.

The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.

Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.

 class Solution {
    private:
    bool possible(vector<int>& bloomDay,int m,int k,int day){
        int cnt=0;
        int b=0;
        for(int i=0;i<bloomDay.size();i++){
            if(bloomDay[i]<=day){
                cnt++;
            }
            else{
                b=b+cnt/k;
                cnt=0;
            }
        }
        b=b+cnt/k;
        if(b>=m)return true;
        else{
            return false;
        }
    }
public:
    int minDays(vector<int>& bloomDay, int m, int k) {
        long int bouquet=m;
        long int t=k;
        long int mul=bouquet*t;
        if(mul>bloomDay.size()){
            return -1;
        }
        int min=INT_MAX;
        int max=INT_MIN;
        for(int i=0;i<bloomDay.size();i++){
            if(bloomDay[i]>max){
                max=bloomDay[i];
            }
            if(bloomDay[i]<min){
                min=bloomDay[i];
            }
        }
        int s=min;
        int e=max;
        while(s<=e){
            int mid=s+(e-s)/2;
            if(possible(bloomDay,m,k,mid)){
                e=mid-1;
            }
            else{
                s=mid+1;
            }
        }
        return s;
    }
};
